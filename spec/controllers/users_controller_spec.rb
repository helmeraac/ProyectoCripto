require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      email:"adminexample@example.com",
      password:"password1234",
      password_confirmation:"password1234",

      name:"Enrique Augusto",
      lastname:"Penalosa Alvarez",
      website:"www.laplayita.com",
      doc:"1032456789",
      address:"Calle Falsa 123",
      phone:"3245678453",

    }
  }

  let(:invalid_attributes) {
    {
      email:"adminexamplexample.com",
      password:"passrd1234",
      password_confirmation:"password1234",

      name:"",
      lastname:"Penalosa Alvarez",
      website:"www.laplayita.com",
      doc:"103289",
      address:"Calle Fala 123",
      phone:"32453",

    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  before :each do
    @request.env["devise.mapping"] = Devise.mappings[:admin]
    @sign_in_admin = FactoryGirl.create(:admin)
    sign_in @sign_in_admin # Using factory girl as an example
  end
  describe "GET #index" do
    it "assigns all users as @users" do
      user = User.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:users)).to eq([user])
    end
  end


  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, params: {user: valid_attributes}, session: valid_session
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, params: {user: valid_attributes}, session: valid_session
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end

      it "return 200 status and a json with success message" do
        post :create, params: {user: valid_attributes}, session: valid_session
        expect(response.status).to be(200)
        expect(response.body).to include('success')
      end

      it "schedule an email to be send to the user" do
        expect{
          post :create, params: {user: valid_attributes}, session: valid_session
        }.to change(Delayed::Job, :count).by(1)
      end

      it "sends an email to the user" do
        post :create, params: {user: valid_attributes}, session: valid_session
        expect{
          Delayed::Worker.new.work_off
        }.to change {ActionMailer::Base.deliveries.count}.by(1)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        post :create, params: {user: invalid_attributes}, session: valid_session
        expect(assigns(:user)).to be_a_new(User)
      end

      it "return 400 status and a json with errors message" do
        post :create, params: {user: invalid_attributes}, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('errors')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          email:"adminexample2@example.com",
          password:"password1234",
          password_confirmation:"password1234",

          name:"Enrique Augusto2",
          lastname:"Penalosa Alvarez2",
          website:"www.laplayita.com2",
          doc:"10324567890",
          address:"Calle Falsa 1232",
          phone:"3245678451",

        }
      }

      it "updates the requested user" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: new_attributes}, session: valid_session
        user.reload
        expect(user.email).to eq("adminexample2@example.com")
        expect(user.name).to eq("Enrique Augusto2")
        expect(user.lastname).to eq("Penalosa Alvarez2")
        expect(user.website).to eq("www.laplayita.com2")
        expect(user.doc).to eq("10324567890")
        expect(user.address).to eq("Calle Falsa 1232")
        expect(user.phone).to eq("3245678451")
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: valid_attributes}, session: valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "return 200 status and a json with success message" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: valid_attributes}, session: valid_session
        expect(response.status).to be(200)
        expect(response.body).to include('success')
      end
    end

    context "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: invalid_attributes}, session: valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "return 400 status and a json with errors message" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: invalid_attributes}, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('errors')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, params: {id: user.to_param}, session: valid_session
      }.to change(User, :count).by(-1)
    end

    it "returns 200 status and returns a success message" do
      user = User.create! valid_attributes
      delete :destroy, params: {id: user.to_param}, session: valid_session
      expect(response.status).to be(200)
      expect(response.body).to include('success')
    end
  end

  describe "POST #regenerate_user_password" do
  context "User Password Regenerated" do
     it "returns 200 status and returns a success message" do
      user = User.create! valid_attributes
      post :regenerate_user_password, params: {id: user.to_param}, session: valid_session
      expect(response.status).to be(200)
      expect(response.body).to include('success')
    end
  end

   
  end

end
