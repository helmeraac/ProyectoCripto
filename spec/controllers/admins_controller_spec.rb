require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AdminsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Admin. As you add validations to Admin, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      email:"adminexample@example.com",
      password:"password1234",
      password_confirmation:"password1234",
      name:"Admin One",
      bio:"A common Admin One",
      photo: Rack::Test::UploadedFile.new(File.join(Rails.root, '/spec/bird.jpg'))

    }
  }

  let(:invalid_attributes) {
    {
      email:"adminexampleexample.com",
      password:"password14",
      password_confirmation:"password14",
      name:""

    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AdminsController. Be sure to keep this updated too.
  let(:valid_session) {

  }

  before :each do
    @request.env["devise.mapping"] = Devise.mappings[:admin]
    @sign_in_admin = FactoryGirl.create(:admin)
    sign_in @sign_in_admin # Using factory girl as an example

  end
  describe "GET #index" do
    it "assigns all admins as @admins" do
      admin = Admin.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:admins)).to eq([@sign_in_admin,admin])
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Admin" do
        expect {
          post :create, params: {admin: valid_attributes}, session: valid_session
        }.to change(Admin, :count).by(1)
      end

      it "assigns a newly created admin as @admin" do
        post :create, params: {admin: valid_attributes}, session: valid_session
        expect(assigns(:admin)).to be_a(Admin)
        expect(assigns(:admin)).to be_persisted
      end

      it "return 200 status and a json with success message" do
        post :create, params: {admin: valid_attributes}, session: valid_session
        expect(response.status).to be(200)
        expect(response.body).to include('success')
      end

      it "schedule an email to be send to the admin" do
        expect{
          post :create, params: {admin: valid_attributes}, session: valid_session
        }.to change(Delayed::Job, :count).by(1)
      end

      it "sends an email to the admin" do
        post :create, params: {admin: valid_attributes}, session: valid_session
        expect{
          Delayed::Worker.new.work_off
        }.to change {ActionMailer::Base.deliveries.count}.by(1)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved admin as @admin" do
        post :create, params: {admin: invalid_attributes}, session: valid_session
        expect(assigns(:admin)).to be_a_new(Admin)
      end

      it "return 400 status and a json with errors message" do
        post :create, params: {admin: invalid_attributes}, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('errors')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          email:"admin2example@example.com",
          name:"Admin One Modified",
          bio:"A common Admin One modified"

        }
      }

      it "updates the requested admin" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: new_attributes}, session: valid_session
        admin.reload
        expect(admin.email).to eq("admin2example@example.com")
        expect(admin.password).to eq("password1234")
        expect(admin.password_confirmation).to eq("password1234")
        expect(admin.name).to eq("Admin One Modified")
        expect(admin.bio).to eq("A common Admin One modified")
      end

      it "assigns the requested admin as @admin" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: valid_attributes}, session: valid_session
        expect(assigns(:admin)).to eq(admin)
      end

      it "return 200 status and a json with success message" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: valid_attributes}, session: valid_session
        expect(response.status).to be(200)
        expect(response.body).to include('success')
      end
    end

    context "with invalid params" do
      it "assigns the admin as @admin" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: invalid_attributes}, session: valid_session
        expect(assigns(:admin)).to eq(admin)
      end

      it "return 400 status and a json with errors message" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: invalid_attributes}, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('errors')
      end
    end
  end

   describe 'DELETE #destroy' do
    context 'The Admin Count is More Than 1' do
      before :each do
        FactoryGirl.create(:admin)  
        FactoryGirl.create(:admin)  
        FactoryGirl.create(:admin)  
        FactoryGirl.create(:admin)  
      end
      it 'destroys the requested admin' do
        admin = Admin.create! valid_attributes
        expect do
          delete :destroy, params: { id: admin.to_param }, session: valid_session
        end.to change(Admin, :count).by(-1)
      end

    it 'returns 200 status and returns a success message' do
      admin = Admin.create! valid_attributes
      delete :destroy, params: { id: admin.to_param }, session: valid_session
      expect(response.status).to be(200)
      expect(response.body).to include('success')
    end
  end
   context 'The Admin Count is 1' do
    
    it 'returns 200 status and returns a success message' do
      Admin.delete_all
      admin = Admin.create! valid_attributes
      @request.env["devise.mapping"] = Devise.mappings[:admin]
      sign_in admin 
      delete :destroy, params: { id: admin.to_param }, session: valid_session
      expect(response.status).to be(400)
      expect(response.body).to include('error')
    end
    end
  end

end
