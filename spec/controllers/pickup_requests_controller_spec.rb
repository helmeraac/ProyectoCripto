require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PickupRequestsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # PickupRequest. As you add validations to PickupRequest, be sure to
  # adjust the attributes here as well.
  before :each do
    @request.env['devise.mapping'] = Devise.mappings[:admin]
    @sign_in_admin = FactoryGirl.create(:admin)
    sign_in @sign_in_admin # Using factory girl as an example
    @user = FactoryGirl.create(:user)
    @user2 = FactoryGirl.create(:user)
  end

  let(:valid_attributes) do
    {
      latitude: 78.9,
      longitude: 67.8,
      address: 'Calle Falsa 123',
      user_id: @user.id,
      status: PickupRequest::PENDING
    }
  end

  let(:invalid_attributes) do
    {
      latitude: 95.5,
      longitude: 182.3,
      address: '',
      user_id: 10,
      status: 4
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PickupRequestsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all pickup_requests as @pickup_requests' do
      pickup_request = PickupRequest.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:pickup_requests)).to eq([pickup_request])
    end
  end

  describe 'GET #list' do
    context 'Incorrect User' do
      before :each do
        @request.env['devise.mapping'] = Devise.mappings[:user]
        @sign_in_user = FactoryGirl.create(:user)
        sign_in @sign_in_user
      end
      it 'doesnt assign user pickup_requests as @user_pickup_requests' do
        valid_attributes[:user_id] = @user.id
        pickup_request = PickupRequest.create! valid_attributes
        valid_attributes[:user_id] = @user2.id
        PickupRequest.create! valid_attributes
        get :list, params: { user_id: @user.id }, session: valid_session
        expect(assigns(:user_pickup_requests)).to eq([])
      end
    end
    context 'Correct User' do
      before :each do
        @user3 = FactoryGirl.create(:user)
        sign_in @user3
      end
      it 'assigns user pickup_requests as @user_pickup_requests' do
        valid_attributes[:user_id] = @user3.id
        pickup_request = PickupRequest.create! valid_attributes
        valid_attributes[:user_id] = @user2.id
        PickupRequest.create! valid_attributes
        get :list, params: { user_id: @user3.id }, session: valid_session
        expect(assigns(:user_pickup_requests)).to eq([pickup_request])
      end
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      context 'Admin User' do
        before :each do
          sign_in @sign_in_admin
        end
        it 'creates a new PickupRequest' do
          expect do
            post :create, params: { pickup_request: valid_attributes }, session: valid_session
          end.to change(PickupRequest, :count).by(1)
        end

        it 'assigns a newly created pickup_request as @pickup_request' do
          post :create, params: { pickup_request: valid_attributes }, session: valid_session
          expect(assigns(:pickup_request)).to be_a(PickupRequest)
          expect(assigns(:pickup_request)).to be_persisted
        end

        it 'return 200 status and a json with success message' do
          post :create, params: { pickup_request: valid_attributes }, session: valid_session
          expect(response.status).to be(200)
          expect(response.body).to include('success')
        end
      end
      context 'Correct User' do
        before :each do
          sign_in @user
        end
        context 'does not exceed maximum active requests' do
          it 'creates a new PickupRequest' do
            expect do
              post :create, params: { pickup_request: valid_attributes }, session: valid_session
            end.to change(PickupRequest, :count).by(1)
          end

          it 'assigns a newly created pickup_request as @pickup_request' do
            post :create, params: { pickup_request: valid_attributes }, session: valid_session
            expect(assigns(:pickup_request)).to be_a(PickupRequest)
            expect(assigns(:pickup_request)).to be_persisted
          end

          it 'return 200 status and a json with success message' do
            post :create, params: { pickup_request: valid_attributes }, session: valid_session
            expect(response.status).to be(200)
            expect(response.body).to include('success')
          end
        end
        context 'exceed maximum active requests' do
          before :each do
            @request1 = FactoryGirl.create(:pickup_request, status: PickupRequest::PENDING, user: @user)
            @request2 = FactoryGirl.create(:pickup_request, status: PickupRequest::PENDING, user: @user)
          end
          it 'assigns a newly created pickup_request as @pickup_request' do
            post :create, params: { pickup_request: valid_attributes }, session: valid_session
            expect(assigns(:pickup_request)).to be_a_new(PickupRequest)
          end
          it 'return 400 status and a json with error message' do
            post :create, params: { pickup_request: valid_attributes }, session: valid_session
            expect(response.status).to be(400)
            expect(response.body).to include('error')
          end
        end
      end
      context 'Incorrect User' do
        before :each do
          sign_in @user2
        end
        it 'return 400 status and a json with error message' do
          post :create, params: { pickup_request: valid_attributes }, session: valid_session
          expect(response.status).to be(400)
          expect(response.body).to include('error')
        end
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved pickup_request as @pickup_request' do
        post :create, params: { pickup_request: invalid_attributes }, session: valid_session
        expect(assigns(:pickup_request)).to be_a_new(PickupRequest)
      end

      it 'return 400 status and a json with errors message' do
        post :create, params: { pickup_request: invalid_attributes }, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('error')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          longitude: 65.8,
          address: 'Calle Falsasdasda 123',
          user_id: @user.id,
          status: PickupRequest::CONFIRMED
        }
      end

      it 'updates the requested pickup_request' do
        pickup_request = PickupRequest.create! valid_attributes
        put :update, params: { id: pickup_request.to_param, pickup_request: new_attributes }, session: valid_session
        pickup_request.reload
        expect(pickup_request.longitude).to eq(65.8)
        expect(pickup_request.address).to eq('Calle Falsasdasda 123')
        expect(pickup_request.user_id).to eq(@user.id)
        expect(pickup_request.status).to eq(PickupRequest::CONFIRMED)
      end

      it 'assigns the requested pickup_request as @pickup_request' do
        pickup_request = PickupRequest.create! valid_attributes
        put :update, params: { id: pickup_request.to_param, pickup_request: valid_attributes }, session: valid_session
        expect(assigns(:pickup_request)).to eq(pickup_request)
      end

      it 'return 200 status and a json with success message' do
        pickup_request = PickupRequest.create! valid_attributes
        put :update, params: { id: pickup_request.to_param, pickup_request: valid_attributes }, session: valid_session
        expect(response.status).to be(200)
        expect(response.body).to include('success')
      end
    end

    context 'with invalid params' do
      it 'assigns the pickup_request as @pickup_request' do
        pickup_request = PickupRequest.create! valid_attributes
        put :update, params: { id: pickup_request.to_param, pickup_request: invalid_attributes }, session: valid_session
        expect(assigns(:pickup_request)).to eq(pickup_request)
      end

      it 'return 400 status and a json with errors message' do
        pickup_request = PickupRequest.create! valid_attributes
        put :update, params: { id: pickup_request.to_param, pickup_request: invalid_attributes }, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('errors')
      end
    end
  end

  describe 'DELETE #destroy' do
    context 'Admin User' do
      it 'destroys the requested pickup_request' do
        pickup_request = PickupRequest.create! valid_attributes
        expect do
          delete :destroy, params: { id: pickup_request.to_param }, session: valid_session
        end.to change(PickupRequest, :count).by(-1)
      end

      it 'returns 200 status and returns a success message' do
        pickup_request = PickupRequest.create! valid_attributes
        delete :destroy, params: { id: pickup_request.to_param }, session: valid_session
        expect(response.status).to be(200)
        expect(response.body).to include('success')
      end
    end
    context 'Incorrect User' do
      before :each do
        sign_out @sign_in_admin
        @request.env['devise.mapping'] = Devise.mappings[:user]
        sign_in @user2 # Using factory girl as an example
      end

      it 'returns 400 status and returns a success message' do
        pickup_request = PickupRequest.create! valid_attributes
        delete :destroy, params: { id: pickup_request.to_param }, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('error')
      end
    end
    context 'Correct User' do
      before :each do
        sign_out @sign_in_admin
        @request.env['devise.mapping'] = Devise.mappings[:user]
        sign_in @user # Using factory girl as an example
      end
      context 'PickupRequest confirmed' do
        it 'returns 400 status and returns a error message' do
          valid_attributes['status'] = PickupRequest::CONFIRMED
          pickup_request = PickupRequest.create! valid_attributes
          delete :destroy, params: { id: pickup_request.to_param }, session: valid_session
          expect(response.status).to be(400)
          expect(response.body).to include('error')
        end
      end
      context 'PickupRequest pending' do
        it 'returns 200 status and returns a success message' do
          valid_attributes['status'] = PickupRequest::PENDING
          pickup_request = PickupRequest.create! valid_attributes
          delete :destroy, params: { id: pickup_request.to_param }, session: valid_session
          expect(response.status).to be(200)
          expect(response.body).to include('success')
        end
      end
    end
  end
end
