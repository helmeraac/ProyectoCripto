require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AppointmentsController, type: :controller do
  before :each do
    @request.env['devise.mapping'] = Devise.mappings[:admin]
    @sign_in_admin = FactoryGirl.create(:admin)
    sign_in @sign_in_admin # Using factory girl as an example
    @user = FactoryGirl.create(:user)
    @user2 = FactoryGirl.create(:user)
    @lab = FactoryGirl.create(:lab)
  end
  # This should return the minimal set of attributes required to create a valid
  # Appointment. As you add validations to Appointment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      date: Time.now + 20.minutes,
      duration: 20,
      lab_id: @lab.id,
      user_id: @user.id,
      status: Appointment::CONFIRMED
    }
  end

  let(:invalid_attributes) do
    {
      date: Time.now - 40.minutes,
      duration: 20,
      lab_id: @lab.id,
      user_id: @user.id,
      status: Appointment::COMPLETED
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AppointmentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all appointments as @appointments' do
      appointment = Appointment.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:appointments)).to eq([appointment])
    end
  end

  describe 'GET #list' do
    context 'Incorrect User' do
      before :each do
        @request.env['devise.mapping'] = Devise.mappings[:user]
        @sign_in_user = FactoryGirl.create(:user)
        sign_in @sign_in_user
      end
      it 'assigns user appointments as @user_appointments' do
        valid_attributes[:user_id] = @user.id
        appointment = Appointment.create! valid_attributes
        valid_attributes[:user_id] = @user2.id
        Appointment.create! valid_attributes
        get :list, params: { user_id: @user.id }, session: valid_session
        expect(assigns(:user_appointments)).to eq([])
      end
    end
    context 'Correct User' do
      before :each do
        @request.env['devise.mapping'] = Devise.mappings[:user]
        @user4 = FactoryGirl.create(:user)
        sign_in @user4
      end
      it 'assigns user appointments as @user_appointments' do
        valid_attributes[:user_id] = @user4.id
        appointment = Appointment.create! valid_attributes
        valid_attributes[:user_id] = @user2.id
        Appointment.create! valid_attributes
        get :list, params: { user_id: @user4.id }, session: valid_session
        expect(assigns(:user_appointments)).to eq([appointment])
      end
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      context 'Correct User' do
        context 'does not exceed maximum requested appoinments' do
          before :each do
            sign_in @user # Using factory girl as an example
          end
          it 'creates a new Appointment' do
            expect do
              post :create, params: { appointment: valid_attributes }, session: valid_session
            end.to change(Appointment, :count).by(1)
          end

          it 'assigns a newly created appointment as @appointment' do
            post :create, params: { appointment: valid_attributes }, session: valid_session
            expect(assigns(:appointment)).to be_a(Appointment)
            expect(assigns(:appointment)).to be_persisted
          end

          it 'return 200 status and a json with success message' do
            post :create, params: { appointment: valid_attributes }, session: valid_session
            expect(response.status).to be(200)
            expect(response.body).to include('success')
          end
        end
        context 'exceed maximum requested appoinments' do
          before :each do
            @appoinment1 = FactoryGirl.create(:appointment, status: Appointment::CONFIRMED, user: @user)
            @appoinment2 = FactoryGirl.create(:appointment, status: Appointment::CONFIRMED, user: @user)
            sign_in @user
          end
          it 'assigns a newly created appoinment as @appoinment' do
            post :create, params: { appointment: valid_attributes }, session: valid_session
            expect(assigns(:appointment)).to be_a_new(Appointment)
          end
          it 'return 400 status and a json with error message' do
            post :create, params: { appointment: valid_attributes }, session: valid_session
            expect(response.status).to be(400)
            expect(response.body).to include('error')
          end
        end
      end

      context 'Incorrect User' do
        before :each do
          sign_in @user2 # Using factory girl as an example
        end
        it 'return 400 status and a json with error message' do
          post :create, params: { appointment: valid_attributes }, session: valid_session
          expect(response.status).to be(400)
          expect(response.body).to include('error')
        end
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved appointment as @appointment' do
        post :create, params: { appointment: invalid_attributes }, session: valid_session
        expect(assigns(:appointment)).to be_a_new(Appointment)
      end

      it 'return 400 status and a json with errors message' do
        post :create, params: { appointment: invalid_attributes }, session: valid_session
        expect(response.status).to be(400)
        expect(response.body).to include('error')
      end
    end
  end

  describe 'PUT #update' do
    let(:new_attributes) do
      {
        date: Time.now + 30.minutes,
        duration: 40,
        lab_id: @lab.id,
        user_id: @user.id,
        status: Appointment::CONFIRMED

      }
    end
    context 'Admin Logged' do
      context 'Valid Params' do
        let(:new_attributes) do
          {
            date: Time.now + 30.minutes,
            duration: 40,
            lab_id: @lab.id,
            user_id: @user.id,
            status: Appointment::COMPLETED

          }
          it 'updates the requested appointment' do
            appoinment = Appointment.create! valid_attributes
            put :update, params: { id: appoinment.to_param, user: new_attributes }, session: valid_session
            appoinment.reload
            expect(appoinment.date).to be > Time.now + 25.minutes
            expect(appoinment.duration).to eq(40)
            expect(appoinment.status).to eq(1)
          end

          it 'assigns the requested appoinment as @appoinment' do
            appoinment = Appointment.create! valid_attributes
            put :update, params: { id: appoinment.to_param, user: valid_attributes }, session: valid_session
            expect(assigns(:appoinment)).to eq(appoinment)
          end

          it 'return 200 status and a json with success message' do
            appoinment = Appointment.create! valid_attributes
            put :update, params: { id: appoinment.to_param, user: valid_attributes }, session: valid_session
            expect(response.status).to be(200)
            expect(response.body).to include('success')
          end
        end
        context 'Invalid Params' do
        end
      end
      context 'Admin Not Logged' do
        before :each do
          sign_out @sign_in_admin
        end
        it 'must redirect the request' do
          appoinment = Appointment.create! valid_attributes
          put :update, params: { id: appoinment.to_param, user: valid_attributes }, session: valid_session
          expect(response.status).to be(302)
        end
      end
    end
  end

  describe 'DELETE #destroy' do
    context 'Admin Logged' do
      it 'destroys the requested appointment' do
        appointment = Appointment.create! valid_attributes
        expect do
          delete :destroy, params: { id: appointment.to_param }, session: valid_session
        end.to change(Appointment, :count).by(-1)
      end

      it 'returns 200 status and returns a success message' do
        appointment = Appointment.create! valid_attributes
        delete :destroy, params: { id: appointment.to_param }, session: valid_session
        expect(response.status).to be(200)
        expect(response.body).to include('success')
      end
    end
  end
end
